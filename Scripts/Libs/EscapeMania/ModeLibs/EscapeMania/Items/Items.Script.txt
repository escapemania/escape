#Include "Libs/Zrx/ModeLibs/Common/VirtualPickups/VirtualPickups.Script.txt" as VirtualPickups
#Include "Libs/Zrx/ModeLibs/Common/VirtualPickups/Inventory.Script.txt" as Inventory

#Const C_ItemType "ItemType"

#Const C_OrbItemType "Orb"
#Const C_HelmetItemType "Helmet"
#Const C_LetterU_ItemType "LetterU"
#Const C_LetterI_ItemType "LetterI"
#Const C_LetterL_ItemType "LetterL"
#Const C_LetterN_ItemType "LetterN"
#Const C_PowerSourceItemType "PowerSource"
#Const C_BottleItemType "Bottle"
#Const C_KeyItemType "Key"
#Const C_BadgeItemType "Badge"

#Struct K_Ids {
	Text[] Ids;
}

declare Integer G_Item_Count;
declare K_Ids[Text] G_SavedItems; 

Void CreateItem(CNod Landmark, Text Type, Text Name, Text Description, Text Icon) {
	G_Item_Count += 1;
	declare Text PickupId = Type ^ G_Item_Count;
	VirtualPickups::Create(PickupId);
	switchtype (Landmark) {
		case CSmPlayer: VirtualPickups::SetPlayer(PickupId, (Landmark as CSmPlayer));
		case CMapLandmark: VirtualPickups::SetLandmark(PickupId, (Landmark as CMapLandmark));
	}
	VirtualPickups::SetCustomDataText(PickupId, C_ItemType, Type);

	declare VirtualPickups::K_MarkerConfig MarkerConfig = VirtualPickups::DefaultMarkerConfig();
	MarkerConfig.HudVisibility = CUIConfigMarker::EHudVisibility::WhenVisible;
	MarkerConfig.ImageUrl = Icon;

	VirtualPickups::SetMarkerConfig(PickupId, MarkerConfig);
	VirtualPickups::SetCustomDataText(PickupId, Inventory::C_PickupCustomDataKey_ImageUrl, Icon);
	VirtualPickups::SetCustomDataText(PickupId, Inventory::C_PickupCustomDataKey_Name, Name);
	VirtualPickups::SetCustomDataText(PickupId, Inventory::C_PickupCustomDataKey_Description, Description);	
}

Text GetPickupType(VirtualPickups::K_VirtualPickup Pickup) {
	return Pickup.CustomData.TextData.get(C_ItemType, "");
}

Void Init() {
	UIManager.UIAll.LabelsVisibility = CUIConfig::EHudVisibility::Everything;
	G_Item_Count = 0;
}

Void Loop() {
	// Save & Restore
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CSmModeEvent::EType::OnPlayerAdded: {
				declare Text Login = Event.Player.User.Login;
				if (G_SavedItems.existskey(Login)) {
					foreach (Id in G_SavedItems[Login].Ids) {
						log("Save " ^ Id);
						VirtualPickups::SetPlayer(Id, Event.Player);
					}
					G_SavedItems[Login].Ids.clear();
				}
			}
			case CSmModeEvent::EType::OnPlayerRemoved: {
				G_SavedItems[Event.User.Login] = K_Ids { Ids = [] };
				foreach (Pickup in VirtualPickups::GetAll()) {
					if (Pickup.PlayerId == Event.User.Login) {
						log("Restore " ^ Id);
						G_SavedItems[Event.User.Login].Ids.add(Pickup.Id);
						VirtualPickups::SetUnspawned(Pickup.Id);
					}
				}
			}
		}
	}
}

// ---------

Void CreateOrbItem(CNod Landmark) {
	CreateItem(
		Landmark,
		C_OrbItemType,
		"Boule de Feu\n$cccGlowing Orb",
		"Etrangement attirée par des cerceaux tournants...\n\n$cccIt is attracted to round moving objects...",
		"https://cdn.discordapp.com/attachments/929103899137310810/973034869439479888/x_item.png"
	);
}

Boolean IsOrbItem(VirtualPickups::K_VirtualPickup Pickup) {
	return GetPickupType(Pickup) == C_OrbItemType;
}

Void CreateHelmetItem(CNod Landmark) {
	CreateItem(
		Landmark,
		C_HelmetItemType,
		"Casque de Respiration\n$cccWater Breathing Helmet",
		"Ce casque magique vous permet de respirer sous l'eau lorsqu'il est alimenté par une source d'énergie bleue.\n\n$cccThis strange helmet lets you breath under water when powered by a blue power source.",
		"https://cdn.discordapp.com/attachments/929103899137310810/977318149403836566/helmet_item.png"
	);
}

Boolean IsHelmetItem(VirtualPickups::K_VirtualPickup Pickup) {
	return GetPickupType(Pickup) == C_HelmetItemType;
}


Void CreateLetterUItem(CNod Landmark) {
	CreateItem(
		Landmark,
		C_LetterU_ItemType,
		"Tuyau en U\n$cccU Pipe",
		"Un gros tuyau qui ressemble à la lettre U.\n\n$cccA thick U-shaped piece of pipe.",
		"https://cdn.discordapp.com/attachments/929103899137310810/977341199046299668/letter_U_item.png"
	);
}

Boolean IsLetterUItem(VirtualPickups::K_VirtualPickup Pickup) {
	return GetPickupType(Pickup) == C_LetterU_ItemType;
}

Void CreateLetterIItem(CNod Landmark) {
	CreateItem(
		Landmark,
		C_LetterI_ItemType,
		"Tuyau en U\n$cccI Pipe",
		"Un gros tuyau qui ressemble à la lettre I.\n\n$cccA thick I-shaped piece of pipe.",
		"https://cdn.discordapp.com/attachments/929103899137310810/977341199289548830/letter_I_item.png"
	);
}

Boolean IsLetterIItem(VirtualPickups::K_VirtualPickup Pickup) {
	return GetPickupType(Pickup) == C_LetterI_ItemType;
}

Void CreateLetterLItem(CNod Landmark) {
	CreateItem(
		Landmark,
		C_LetterL_ItemType,
		"Tuyau en L\n$cccL Pipe",
		"Un gros tuyau qui ressemble à la lettre L.\n\n$cccA thick L-shaped piece of pipe.",
		"https://cdn.discordapp.com/attachments/929103899137310810/977341199503487016/letter_L_item.png"
	);
}

Boolean IsLetterLItem(VirtualPickups::K_VirtualPickup Pickup) {
	return GetPickupType(Pickup) == C_LetterL_ItemType;
}

Void CreateLetterNItem(CNod Landmark) {
	CreateItem(
		Landmark,
		C_LetterN_ItemType,
		"Tuyau en N\n$cccN Pipe",
		"Un gros tuyau qui ressemble à la lettre N.\n\n$cccA thick N-shaped piece of pipe.",
		"https://cdn.discordapp.com/attachments/929103899137310810/977341199725760523/letter_N_item.png"
	);
}

Boolean IsLetterNItem(VirtualPickups::K_VirtualPickup Pickup) {
	return GetPickupType(Pickup) == C_LetterN_ItemType;
}

Boolean IsLetterItem(VirtualPickups::K_VirtualPickup Pickup) {
	return (
		IsLetterUItem(Pickup) ||
		IsLetterIItem(Pickup) ||
		IsLetterLItem(Pickup) ||
		IsLetterNItem(Pickup)
	);
}

Void CreatePowerSourceItem(CNod Landmark) {
	CreateItem(
		Landmark,
		C_PowerSourceItemType,
		"Source d'Energie Bleue\n$cccBlue Power Source",
		"Cette source d'énergie bleue active les pouvoirs d'objets magiques.\n\n$cccThis blue power source activates magical objects.",
		"https://cdn.discordapp.com/attachments/929103899137310810/977363945834831913/powersource_item.png"
	);
}

Boolean IsPowerSourceItem(VirtualPickups::K_VirtualPickup Pickup) {
	return GetPickupType(Pickup) == C_PowerSourceItemType;
}

Void CreateBottleItem(CNod Landmark) {
	CreateItem(
		Landmark,
		C_BottleItemType,
		"Bouteille à la Mer\n$cccMessage in a Bottle",
		"Les boules doivent être placées\ndans la pénombre\nen ligne droite\npour que les coins se rejoignent\n      -- Capitaine\n\n$cccThe orbs must be placed\nwhere darkness lies\nin straight lines\nfor corners to meet\n      -- Captain",
		"https://cdn.discordapp.com/attachments/929103899137310810/977637638574075985/bottle_item.png"
	);
}

Boolean IsBottleItem(VirtualPickups::K_VirtualPickup Pickup) {
	return GetPickupType(Pickup) == C_BottleItemType;
}

Void CreateKeyItem(CNod Landmark) {
	CreateItem(
		Landmark,
		C_KeyItemType,
		"Clé Rouge\n$cccRed Key",
		"Cette clé permet d'arrêter ce vaisseau dans la salle de contrôle. Quand le vaisseau est arrêté, le système qui génère une gravité terriène ne fonctionne plus.\n\n$cccUse this key in the control room to stop the ship. When the ship is stopped, the mechanism that enables earth-like gravity movement no longer works!",
		"https://cdn.discordapp.com/attachments/929103899137310810/977724464211066970/key_item.png"
	);
}

Boolean IsKeyItem(VirtualPickups::K_VirtualPickup Pickup) {
	return GetPickupType(Pickup) == C_KeyItemType;
}

Void CreateBadgeItem(CNod Landmark) {
	CreateItem(
		Landmark,
		C_BadgeItemType,
		"Brouilleur\n$cccBadge Jammer",
		"Ce brouilleur fait malfonctionner les contrôles d'accès.\n\n$cccThis badge jams access control mechanisms it encounters.",
		"https://cdn.discordapp.com/attachments/929103899137310810/977724464412368926/badge_item.png"
	);
}

Boolean IsBadgeItem(VirtualPickups::K_VirtualPickup Pickup) {
	return GetPickupType(Pickup) == C_BadgeItemType;
}