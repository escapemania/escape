#Include "Libs/Zrx/ModeLibs/Common/VirtualPickups/VirtualPickups.Script.txt" as VirtualPickups
#Include "Libs/EscapeMania/ModeLibs/EscapeMania/Items/Items.Script.txt" as Items
#Include "Libs/EscapeMania/ModeLibs/EscapeMania/Simon/Simon.Script.txt" as Simon

#Include "TextLib" as TL

#Const C_LetterLandmarkTagPrefix "Pipe_Letter"
#Const C_PipeLandmarkTagPrefix "Pipe_Drop"
#Const C_PipeSuccessLandmarkTagPrefix "Pipe_Drop_Letter_"
#Const C_PipeItemLandmarkTag "Pipe_Drop_Item"

#Const C_DropULandmarkTag "Pipe_Drop_Letter_U"
#Const C_DropILandmarkTag "Pipe_Drop_Letter_I"
#Const C_DropLLandmarkTag "Pipe_Drop_Letter_L"
#Const C_DropNLandmarkTag "Pipe_Drop_Letter_N"


Boolean IsPuzzleComplete() {
	foreach (Landmark in MapLandmarks) {
		if (TL::StartsWith(C_PipeSuccessLandmarkTagPrefix, Landmark.Tag)) {
			declare VirtualPickups::K_VirtualPickup[] LandmarkPickups = VirtualPickups::GetByHolder(Landmark);
			if (
				LandmarkPickups.count == 0 ||
				Landmark.Tag == C_DropULandmarkTag && !Items::IsLetterUItem(LandmarkPickups[0]) ||
				Landmark.Tag == C_DropILandmarkTag && !Items::IsLetterIItem(LandmarkPickups[0]) ||
				Landmark.Tag == C_DropLLandmarkTag && !Items::IsLetterLItem(LandmarkPickups[0]) ||
				Landmark.Tag == C_DropNLandmarkTag && !Items::IsLetterNItem(LandmarkPickups[0])
			) {
				return False;
			}
		}
	}
	return True;
}

Void ResetPuzzle() {
	// Destroy Letter Items & Power Source Items
	foreach (Pickup in VirtualPickups::GetAll()) {
		if (Items::IsLetterItem(Pickup) || Items::IsPowerSourceItem(Pickup)) {
			VirtualPickups::Destroy(Pickup.Id);
		}
	}
	
	Simon::CreateItems();
}

Void CompletePuzzle() {
	// Destroy Letter Items & Power Source Items
	foreach (Pickup in VirtualPickups::GetAll()) {
		if (Items::IsLetterItem(Pickup) || Items::IsPowerSourceItem(Pickup)) {
			VirtualPickups::Destroy(Pickup.Id);
		}
	}
	
	// Create Power Source Items
	foreach (Landmark in MapLandmarks) {
		if (Landmark.Tag == C_PipeItemLandmarkTag) {
			Items::CreatePowerSourceItem(Landmark);
		}
	}
	
	// Tell all the players something happened!
	foreach (Player in Players) {
		declare UI = UIManager.GetUI(Player);
		UI.QueueMessage(1000, 1, CUIConfig::EMessageDisplay::Big, "");
	}
}

Void Loop() {
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CSmModeEvent::EType::OnPlayerTriggersWaypoint: {
				if (
					TL::StartsWith(C_PipeLandmarkTagPrefix, Event.Landmark.Tag) ||
					TL::StartsWith(C_LetterLandmarkTagPrefix, Event.Landmark.Tag)
				) {
					// Pickup
					declare VirtualPickups::K_VirtualPickup[] LandmarkPickups = VirtualPickups::GetByHolder(Event.Landmark);
					if (LandmarkPickups.count > 0) {
						declare VirtualPickups::K_VirtualPickup Pickup = LandmarkPickups[0];
						if (Items::IsLetterItem(Pickup)) {
							// You can only have one item of this type
							declare Boolean AlreadyHasItem = False;
							foreach (Pickup in VirtualPickups::GetByHolder(Event.Player)) {
								if (Items::IsLetterItem(Pickup)) {
									AlreadyHasItem = True;
									break;
								}	
							}
							if (!AlreadyHasItem) {
								VirtualPickups::SetHolder(Pickup.Id, Event.Player);					
							}
						}
						if (Items::IsPowerSourceItem(Pickup)) {
							// You can only have one item of this type
							declare Boolean AlreadyHasItem = False;
							foreach (Pickup in VirtualPickups::GetByHolder(Event.Player)) {
								if (Items::IsPowerSourceItem(Pickup)) {
									AlreadyHasItem = True;
									break;
								}	
							}
							if (!AlreadyHasItem) {
								VirtualPickups::SetHolder(Pickup.Id, Event.Player);					
							}
						}
						
					// Dropoff
					} else if (TL::StartsWith(C_PipeLandmarkTagPrefix, Event.Landmark.Tag)) {
						foreach (Pickup in VirtualPickups::GetByHolder(Event.Player)) {
							if (Items::IsLetterItem(Pickup)) {
								VirtualPickups::SetHolder(Pickup.Id, Event.Landmark);
								
								if (IsPuzzleComplete()) {
									CompletePuzzle();
								}
								break;
							}
						}
					}
				}
			}
		}
	}
}