#Include "Libs/Zrx/ModeLibs/Common/VirtualPickups/VirtualPickups.Script.txt" as VirtualPickups
#Include "Libs/EscapeMania/ModeLibs/EscapeMania/Items/Items.Script.txt" as Items

#Include "TextLib" as TL

#Const C_DropLandmarkTagPrefix "X_Drop"
#Const C_DropSuccessLandmarkTag "X_Drop_Success"
#Const C_DropItemLandmarkTag "X_Drop_Item"
#Const C_DropInitialLandmarkTag "X_Drop_Initial"
#Const C_PickupLandmarkTag "X_Pickup"

Void Init() {
	foreach (Landmark in MapLandmarks) {
		if (Landmark.Tag == C_PickupLandmarkTag || Landmark.Tag == C_DropInitialLandmarkTag) {
			Items::CreateOrbItem(Landmark);
		}
	}
}

Void ResetPuzzle() {
	// Destroy Orb Items and Helmet Items
	foreach (Pickup in VirtualPickups::GetAll()) {
		if (Items::IsOrbItem(Pickup) || Items::IsHelmetItem(Pickup)) {
			VirtualPickups::Destroy(Pickup.Id);
		}
	}
	Init();
}

Boolean IsPuzzleComplete() {
	foreach (Landmark in MapLandmarks) {
		if (Landmark.Tag == C_DropSuccessLandmarkTag) {
			if (VirtualPickups::GetByLandmark(Landmark).count == 0) {
				return False;
			}
		}
	}
	return True;
}

Void CompletePuzzle() {
	// Destroy Orb Items and Helmet Items
	foreach (Pickup in VirtualPickups::GetAll()) {
		if (Items::IsOrbItem(Pickup) || Items::IsHelmetItem(Pickup)) {
			VirtualPickups::Destroy(Pickup.Id);
		}
	}
	
	// Create Helmet Items
	foreach (Landmark in MapLandmarks) {
		if (Landmark.Tag == C_DropItemLandmarkTag) {
			Items::CreateHelmetItem(Landmark);
		}
	}
	
	// Tell all the players something happened!
	foreach (Player in Players) {
		declare UI = UIManager.GetUI(Player);
		UI.QueueMessage(1000, 1, CUIConfig::EMessageDisplay::Big, "");
	}
}

Void Loop() {
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CSmModeEvent::EType::OnPlayerTriggersWaypoint: {
				if (
					Event.Landmark.Tag == C_PickupLandmarkTag ||
					TL::StartsWith(C_DropLandmarkTagPrefix, Event.Landmark.Tag)
				) {
					// Pickup
					declare VirtualPickups::K_VirtualPickup[] LandmarkPickups = VirtualPickups::GetByLandmark(Event.Landmark);
					if (LandmarkPickups.count > 0) {
						declare VirtualPickups::K_VirtualPickup Pickup = LandmarkPickups[0];
						if (Items::IsHelmetItem(Pickup)) {
							// You can only have one item of this type
							declare Boolean AlreadyHasItem = False;
							foreach (Pickup in VirtualPickups::GetByPlayer(Event.Player)) {
								if (Items::IsHelmetItem(Pickup)) {
									AlreadyHasItem = True;
									break;
								}	
							}
							if (!AlreadyHasItem) {
								VirtualPickups::SetPlayer(Pickup.Id, Event.Player);					
							}
						} else if (Items::IsOrbItem(Pickup)) {
							VirtualPickups::SetPlayer(Pickup.Id, Event.Player);					
						}
						
					// Dropoff
					} else if (TL::StartsWith(C_DropLandmarkTagPrefix, Event.Landmark.Tag)) {
						foreach (Pickup in VirtualPickups::GetByPlayer(Event.Player)) {
							if (Items::IsOrbItem(Pickup)) {
								VirtualPickups::SetLandmark(Pickup.Id, Event.Landmark);
								
								if (IsPuzzleComplete()) {
									CompletePuzzle();
								}
								break;
							}
						}
					}
				}
			}
		}
	}
}
