#Include "Libs/EscapeMania/ModeLibs/EscapeMania/Rooms/RoomsRequestRespawn.Script.txt" as RoomsRequestRespawn
#Include "Libs/EscapeMania/ModeLibs/EscapeMania/MediaTracker/MediaTracker.Script.txt" as MediaTracker
#Include "Libs/EscapeMania/ModeLibs/EscapeMania/Turtle/Turtle.Script.txt" as Turtle

#Const C_TunnelTagPrefixRow "Tunnel_Row_"
#Const C_TunnelTagPrefixColumn "Tunnel_Column_"
#Const C_TunnelEntranceTag "Tunnel_Entrance"
#Const C_MediaTrackerPriority 4

#Include "TextLib" as TL

declare Text G_CurrentPlayerLogin;

Void ResetMediaTracker() {
	foreach (Player in Players) {
		if (Player.User.Login != G_CurrentPlayerLogin) {
			MediaTracker::UnsetMediaTracker(Player, C_MediaTrackerPriority);
		}
	}
}

Void ResetPuzzle() {
	if (G_CurrentPlayerLogin != "") {
		ResetMediaTracker();
		G_CurrentPlayerLogin = "";
	}
}

Void OnEnterTest(CSmPlayer EnterPlayer, Text Tag) {
	declare Text MediaTracker = TL::Replace(TL::Replace(Tag, "Tunnel_", ""), "_", " ");
	foreach (Player in Players) {
		if (Player != EnterPlayer) {
			MediaTracker::SetMediaTracker(Player, MediaTracker, C_MediaTrackerPriority);
		}
		declare UI = UIManager.GetUI(Player);
		UI.QueueMessage(1000, 1, CUIConfig::EMessageDisplay::Big, "");
	}
}


Void OnLeaveTest(CSmPlayer Player) {
	if (Player.User.Login == G_CurrentPlayerLogin) {
		ResetMediaTracker();
	}
}

Void OnRespawn(CSmPlayer Player) {
	if (Player.User.Login == G_CurrentPlayerLogin) {
		OnLeaveTest(Player);
		G_CurrentPlayerLogin = "";
	}
}

Void OnEnterTunnel(CSmPlayer Player) {
	if (!Turtle::IsComplete()) {	
		RoomsRequestRespawn::RequestRespawn(Player);
		declare UI = UIManager.GetUI(Player);
		UI.QueueMessage(3000, 1, CUIConfig::EMessageDisplay::Big, "");
		return;
	}

	if (G_CurrentPlayerLogin != "") {
		RoomsRequestRespawn::RequestRespawn(Player);
		declare UI = UIManager.GetUI(Player);
		UI.QueueMessage(3000, 1, CUIConfig::EMessageDisplay::Big, " ");
		return;
	}
	
	G_CurrentPlayerLogin = Player.User.Login;
}

Void Init() {
	G_CurrentPlayerLogin = "";
}

Void Loop() {
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CSmModeEvent::EType::OnPlayerTriggersWaypoint: {
				if (
					TL::StartsWith(C_TunnelTagPrefixRow, Event.Landmark.Tag) ||
					TL::StartsWith(C_TunnelTagPrefixColumn, Event.Landmark.Tag)
				) {
					OnEnterTest(Event.Player, Event.Landmark.Tag);
				} else if (Event.Landmark.Tag == C_TunnelEntranceTag) {
					OnEnterTunnel(Event.Player);
				} else {
					OnLeaveTest(Event.Player);
				}
			}
		}
	}
}
